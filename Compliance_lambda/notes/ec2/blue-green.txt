import boto3

ec2 = boto3.client('ec2')
cw = boto3.client('cloudwatch')

# Define the blue and green environment tags
blue_tag = {"Key": "Environment", "Value": "Blue"}
green_tag = {"Key": "Environment", "Value": "Green"}

# Define the instance type and configuration for the Spot instance
spot_instance_type = "t3.medium"
spot_security_group = "sg-xxxxxxxxxxxx"
spot_subnet = "subnet-xxxxxxxxxxxx"
spot_ami = "ami-xxxxxxxxxxxx"
spot_key_name = "my-keypair"

def lambda_handler(event, context):
    # Get the instance ID from the CloudWatch event
    instance_id = event['detail']['instance-id']

    # Get the CloudWatch metric data for the EC2 instance
    response = cw.get_metric_data(
        MetricDataQueries=[
            {
                'Id': 'm1',
                'MetricStat': {
                    'Metric': {
                        'Namespace': 'AWS/EC2',
                        'MetricName': 'EstimatedCharges',
                        'Dimensions': [
                            {
                                'Name': 'ServiceName',
                                'Value': 'AmazonEC2'
                            },
                            {
                                'Name': 'Currency',
                                'Value': 'USD'
                            }
                        ]
                    },
                    'Period': 3600,
                    'Stat': 'Maximum'
                },
                'ReturnData': True
            },
        ],
        StartTime=(datetime.now() - timedelta(hours=1)).isoformat(),
        EndTime=datetime.now().isoformat()
    )

    # Calculate the estimated cost for the instance over the last hour
    estimated_charges = response['MetricDataResults'][0]['Values'][0]

    # If the estimated charges exceed the threshold, initiate the migration process
    if estimated_charges > 10.0:
        print(f"Estimated charges for instance {instance_id} exceeded the threshold: ${estimated_charges}")

        # Get the instance details
        instance = ec2.describe_instances(InstanceIds=[instance_id])['Reservations'][0]['Instances'][0]

        # Create a new Spot instance
        spot_instance = ec2.run_instances(
            ImageId=spot_ami,
            InstanceType=spot_instance_type,
            KeyName=spot_key_name,
            SecurityGroupIds=[spot_security_group],
            SubnetId=spot_subnet,
            TagSpecifications=[{
                'ResourceType': 'instance',
                'Tags': [green_tag]
            }]
        )
        spot_instance_id = spot_instance['Instances'][0]['InstanceId']

        # Wait for the Spot instance to start
        waiter = ec2.get_waiter('instance_running')
        waiter.wait(InstanceIds=[spot_instance_id])

        # Update the ELB target group to add the new Spot instance
        elbv2 = boto3.client('elbv2')
        target_group_arn = os.environ['TARGET_GROUP_ARN']
        target_id = elbv2.register_targets(
            TargetGroupArn=target_group_arn,
            Targets=[{
                'Id': spot_instance_id
            }]
        )

        # Update the instance tags to mark it for retirement
        ec2.create_tags(Resources=[instance_id], Tags=[blue_tag])
        ec2.create_tags(Resources=[spot_instance_id], Tags=[green_tag])

        # Update the ELB target group to remove the old On-Demand instance
        elbv2.deregister_targets(
            TargetGroupArn=target_group_arn,
            Targets=[{
                'Id': instance_id
            }]
        )

        # Wait for the old On-Demand instance to be removed from the target group
        waiter = elbv2.get_waiter('target_deregistered')
        waiter.wait(
            TargetGroupArn=target_group_arn,
            Targets=[{
                'Id': instance_id
            }]
        )

        # Terminate the old On-Demand instance
        ec2.terminate_instances(InstanceIds=[instance_id])

        print(f"Instance {instance_id} successfully migrated to Spot instance {spot_instance_id}")

Description:
This is a Python code snippet that demonstrates an AWS Lambda function designed to migrate an EC2 instance from an On-Demand
instance to a Spot instance. This migration is triggered if the estimated charges for the On-Demand instance exceed a certain
threshold.

Here's an overview of what the code does:

It imports the required modules (boto3) for AWS SDK access.

It defines the EC2 and CloudWatch client objects that will be used to interact with the AWS APIs.

It defines the blue and green environment tags that are used to differentiate between the old On-Demand and new Spot instances.

It defines the instance type and configuration for the Spot instance that will be launched to replace the On-Demand instance.

It defines the lambda_handler function that will be executed when the Lambda function is triggered. The function takes two parameters,
an event and a context.

The function extracts the instance ID from the CloudWatch event that triggered the function.

The function retrieves the CloudWatch metric data for the EC2 instance, specifically the maximum estimated charges over the last hour.

If the estimated charges exceed the threshold (10 USD in this case), the function proceeds with the migration process.

The function retrieves the details of the On-Demand instance using the EC2 client object.

The function launches a new Spot instance with the specified instance type, security group, subnet, AMI, and tag specifications.

The function waits for the new Spot instance to start running.

The function registers the new Spot instance with the specified Elastic Load Balancer (ELB) target group.

The function tags the On-Demand and Spot instances with the blue and green environment tags respectively.

The function deregisters the On-Demand instance from the ELB target group.

The function waits for the On-Demand instance to be removed from the ELB target group.

The function terminates the On-Demand instance.

The function outputs a success message indicating that the migration process has been completed.

Overall, this code automates the process of migrating an On-Demand EC2 instance to a Spot instance based on the estimated
charges for the instance, and takes care of the necessary tasks such as launching the Spot instance, registering it with the
ELB, and retiring the On-Demand instance.