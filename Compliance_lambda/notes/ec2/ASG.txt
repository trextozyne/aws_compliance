response = self.autoscaling_client.attach_instances(
        InstanceIds=[response['Instances'][0]['InstanceId']],
        AutoScalingGroupName=asg_name
    )


# Adds the given EC2 instance ID to the specified Auto Scaling Group
        response = self.autoscaling_client.describe_auto_scaling_groups(AutoScalingGroupNames=[asg_name])
        if len(response['AutoScalingGroups']) > 0:
            group = response['AutoScalingGroups'][0]
            instance_ids = [i['InstanceId'] for i in group['Instances']]
            if instance_id not in instance_ids:
                instance_ids.append(instance_id)
                self.autoscaling_client.update_auto_scaling_group(AutoScalingGroupName=asg_name,
                                                                  InstanceIds=instance_ids)


asg_number += 1
 new_asg_name = asg_name + str(asg_number)




try:
    asg_name = self.create_lc_autoscaling_group(instance_id)
except Exception as e:
    print(f'Create Autoscaling Group Error: {e}')
try:
    self.add_instance_to_autoscaling_group(instance_id, asg_name)
except Exception as e:
    print(f'Add Instance To Autoscaling Group Error: {e}')



# # Create or update the Auto Scaling Group
# if self.perform_instance_autoscaling_group(instance_id) is None:
#     self.create_lc_autoscaling_group(instance_id, launch_config_name, asg_name_suffix)
# else:
#     self.add_instance_to_autoscaling_group(instance_id, asg_name)

except ClientError as e:
    if e.response['Error']['Code'] == 'AlreadyExists':
        print("Auto Scaling Group does not exist")

        # Creates a new Auto Scaling Group with the given EC2 instance ID as a member
        get_asg_response = self.create_asg(asg_name, instance_id, min_size, max_size, desired_capacity,
                                           launch_config_name, instance)

        self.attach_instance_to_autoscaling_group(instance_id, asg_name)
        return get_asg_response['AutoScalingGroup']['AutoScalingGroupName']
